import { UserData } from '../types/UserData';

export const generateCodingAdvice = (area: string, userData: UserData): string => {
  const currentYear = 2025;
  
  const advice = {
    'Code Generation': `Here's your personalized coding assistance for ${userData.language || 'programming'}:

üíª **Smart Code Generation:**
‚Ä¢ Clean, readable code following ${userData.language || 'modern'} best practices
‚Ä¢ Comments explaining complex logic
‚Ä¢ Error handling and edge cases included
‚Ä¢ Performance-optimized solutions

üéØ **For ${userData.experience || 'your level'}:**
${userData.experience === 'beginner' ? 
  '‚Ä¢ Step-by-step explanations with each code block\n‚Ä¢ Simple, clear examples to build understanding\n‚Ä¢ Common pitfalls and how to avoid them' :
  '‚Ä¢ Advanced patterns and optimization techniques\n‚Ä¢ Code architecture recommendations\n‚Ä¢ Performance analysis and improvements'}

üî• **${userData.language || 'Language'} Specialties:**
${userData.language === 'React' || userData.language === 'JavaScript' ? 
  '‚Ä¢ Modern React patterns (hooks, context, custom hooks)\n‚Ä¢ TypeScript integration\n‚Ä¢ Performance optimization with useMemo/useCallback' :
  '‚Ä¢ Language-specific best practices\n‚Ä¢ Framework recommendations\n‚Ä¢ Modern tooling and workflows'}

**Next Step:** Share your specific coding challenge and I'll write the solution!`,

    'Debugging Help': `Let's squash those bugs in your ${userData.language || 'code'}! üêõ‚û°Ô∏è‚ú®

üîç **Debug Strategy for ${currentYear}:**
1. **Share your code** - Paste the problematic code snippet
2. **Describe the issue** - What's happening vs. what should happen?
3. **Error messages** - Include any error logs or console output

üõ†Ô∏è **Common ${userData.language || 'Programming'} Issues:**
${userData.language === 'JavaScript' || userData.language === 'React' ? 
  '‚Ä¢ Async/await timing issues\n‚Ä¢ State management bugs\n‚Ä¢ Event handling problems\n‚Ä¢ API integration errors' :
  userData.language === 'Python' ?
  '‚Ä¢ Indentation errors\n‚Ä¢ Variable scope issues\n‚Ä¢ Import/module problems\n‚Ä¢ Type-related bugs' :
  '‚Ä¢ Logic errors\n‚Ä¢ Syntax issues\n‚Ä¢ Performance bottlenecks\n‚Ä¢ Integration problems'}

üí° **Debug Tools I'll Teach:**
‚Ä¢ Console logging strategies
‚Ä¢ Breakpoint debugging
‚Ä¢ Error handling patterns
‚Ä¢ Testing approaches

**Ready to debug?** Paste your code and let's fix it together!`,

    'Interview Prep': `Let's ace your ${userData.language || 'tech'} coding interviews! üéØ

üèÜ **${currentYear} Interview Prep Plan:**
‚Ä¢ **Week 1-2:** Master fundamentals (arrays, strings, hashmaps)
‚Ä¢ **Week 3-4:** Trees, graphs, and dynamic programming
‚Ä¢ **Week 5-6:** System design and behavioral questions
‚Ä¢ **Week 7+:** Company-specific practice

üé§ **Mock Interview Formats:**
1. **Coding Challenge** - 45-minute problem solving
2. **System Design** - Scalable architecture discussion
3. **Behavioral** - Leadership and collaboration scenarios

üî• **${userData.language || 'Language'}-Specific Prep:**
${userData.language === 'Python' ? 
  '‚Ä¢ List comprehensions and generators\n‚Ä¢ Object-oriented design patterns\n‚Ä¢ Data structures implementation\n‚Ä¢ Algorithm complexity analysis' :
  userData.language === 'JavaScript' || userData.language === 'React' ?
  '‚Ä¢ Asynchronous JavaScript patterns\n‚Ä¢ React component optimization\n‚Ä¢ Frontend system design\n‚Ä¢ DOM manipulation and events' :
  '‚Ä¢ Language-specific algorithms\n‚Ä¢ Framework knowledge\n‚Ä¢ Code optimization\n‚Ä¢ Best practices and patterns'}

**Practice Problem:** Ready for a coding challenge? Type "start interview" to begin!`,

    'Algorithm Practice': `Master algorithms and data structures for ${userData.language || 'your language'}! üìö

üìä **Learning Path for ${userData.experience || 'Your Level'}:**
${userData.experience === 'beginner' ?
  '‚Ä¢ **Foundation:** Arrays, strings, basic loops\n‚Ä¢ **Next:** Hash tables, two pointers\n‚Ä¢ **Then:** Binary search, simple recursion' :
  '‚Ä¢ **Advanced:** Dynamic programming, graph algorithms\n‚Ä¢ **Expert:** Segment trees, advanced DP\n‚Ä¢ **Master:** Competitive programming patterns'}

üéØ **Algorithm Categories:**
‚Ä¢ **Sorting & Searching** - Quick sort, binary search
‚Ä¢ **Dynamic Programming** - Memoization, tabulation
‚Ä¢ **Graph Algorithms** - DFS, BFS, shortest paths
‚Ä¢ **Tree Traversals** - Inorder, preorder, postorder
‚Ä¢ **String Processing** - Pattern matching, parsing

üíª **Practice Resources:**
‚Ä¢ **LeetCode** - 3 problems daily (easy‚Üímedium‚Üíhard)
‚Ä¢ **HackerRank** - Language-specific challenges
‚Ä¢ **CodeSignal** - Company interview simulations

**Challenge:** Want to solve a ${userData.experience || 'level-appropriate'} algorithm problem right now?`,

    'Concept Explanation': `Let's demystify ${userData.language || 'programming'} concepts! üß†

üîç **Explanation Style for ${userData.experience || 'Your Level'}:**
${userData.experience === 'beginner' ?
  '‚Ä¢ **Visual analogies** - Compare code concepts to real-world examples\n‚Ä¢ **Step-by-step breakdown** - No assumptions about prior knowledge\n‚Ä¢ **Interactive examples** - Code you can run and modify' :
  '‚Ä¢ **Deep technical details** - Implementation specifics\n‚Ä¢ **Performance implications** - Time/space complexity\n‚Ä¢ **Advanced patterns** - Design principles and architecture'}

üìö **Popular ${currentYear} Concepts:**
${userData.language === 'React' || userData.language === 'JavaScript' ?
  '‚Ä¢ **React Server Components** - Latest rendering patterns\n‚Ä¢ **State Management** - Redux Toolkit, Zustand, Context\n‚Ä¢ **Performance** - Code splitting, lazy loading\n‚Ä¢ **TypeScript** - Advanced type patterns' :
  userData.language === 'Python' ?
  '‚Ä¢ **Async Programming** - asyncio, concurrent futures\n‚Ä¢ **Type Hints** - MyPy, Pydantic validation\n‚Ä¢ **Data Classes** - Modern Python patterns\n‚Ä¢ **Decorators** - Function enhancement patterns' :
  '‚Ä¢ **Design Patterns** - Singleton, Observer, Factory\n‚Ä¢ **Memory Management** - Optimization techniques\n‚Ä¢ **Concurrency** - Threads, processes, async\n‚Ä¢ **Testing** - Unit testing, TDD principles'}

**What concept confuses you?** I'll explain it clearly with code examples!`,

    'Code Optimization': `Let's supercharge your ${userData.language || 'code'} performance! ‚ö°

üöÄ **Optimization Strategy:**
1. **Measure first** - Profile before optimizing
2. **Target bottlenecks** - Focus on the 80/20 rule
3. **Maintain readability** - Fast but maintainable code
4. **Test thoroughly** - Ensure correctness

‚ö° **${userData.language || 'Language'} Performance Tips:**
${userData.language === 'JavaScript' || userData.language === 'React' ?
  '‚Ä¢ **Bundle optimization** - Code splitting, tree shaking\n‚Ä¢ **React optimization** - useMemo, useCallback, React.memo\n‚Ä¢ **DOM manipulation** - Virtual DOM best practices\n‚Ä¢ **Network optimization** - Lazy loading, caching' :
  userData.language === 'Python' ?
  '‚Ä¢ **Data structures** - Use sets for lookups, deque for queues\n‚Ä¢ **List comprehensions** - Faster than loops\n‚Ä¢ **Built-in functions** - map(), filter(), reduce()\n‚Ä¢ **Caching** - functools.lru_cache for expensive calls' :
  '‚Ä¢ **Algorithm complexity** - Choose optimal data structures\n‚Ä¢ **Memory usage** - Avoid memory leaks\n‚Ä¢ **Compiler optimizations** - Language-specific tricks\n‚Ä¢ **Profiling tools** - Measure and optimize'}

üîß **Modern Tools (${currentYear}):**
‚Ä¢ **Profilers** - Chrome DevTools, Python cProfile
‚Ä¢ **Linters** - ESLint, Pylint for code quality
‚Ä¢ **Formatters** - Prettier, Black for consistency

**Send me your code** and I'll show you specific optimizations!`
  };

  return advice[area] || "I'm here to help with all your coding needs! What specific challenge are you facing?";
};